require 'rspec/openapi'


# Change the path to generate schema from `doc/openapi.yaml`
# RSpec::OpenAPI.path = 'doc/schema.yaml'

# Change the output type to JSON
# RSpec::OpenAPI.path = 'doc/schema.json'

RSpec::OpenAPI.path = ->(example) {
  "doc/openapi/#{example.metadata[:file_path].match(%r{api/v1/(.*)_spec.rb})[1]}.yaml"
}

# Or generate multiple partial schema files, given an RSpec example

# Change the default title of the generated schema
RSpec::OpenAPI.title = 'Algo Sangaku Documentation'

# Or generate individual titles for your partial schema files, given an RSpec example
# RSpec::OpenAPI.title = -> (example) {
#   case example.file_path
#   when %r[spec/requests/api/v1/] then 'API v1 Documentation'
#   when %r[spec/requests/api/v2/] then 'API v2 Documentation'
#   else 'OpenAPI Documentation'
#   end
# }

# Disable generating `example`
# RSpec::OpenAPI.enable_example = false

# Change `info.version`
# RSpec::OpenAPI.application_version = '1.0.0'

# Set the info header details
# RSpec::OpenAPI.info = {
#   description: 'My beautiful API',
#   license: {
#     'name': 'Apache 2.0',
#     'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'
#   }
# }

# Set request `headers` - generate parameters with headers for a request
# RSpec::OpenAPI.request_headers = %w[X-Authorization-Token]

# Set response `headers` - generate parameters with headers for a response
# RSpec::OpenAPI.response_headers = %w[X-Cursor]

# Set `servers` - generate servers of a schema file
# RSpec::OpenAPI.servers = [{ url: 'http://localhost:3000' }]

# Set `security_schemes` - generate security schemes
# RSpec::OpenAPI.security_schemes = {
#   'MyToken' => {
#     description: 'Authenticate API requests via a JWT',
#     type: 'http',
#     scheme: 'bearer',
#     bearerFormat: 'JWT',
#   },
# }

# Generate a comment on top of a schema file
# RSpec::OpenAPI.comment = <<~EOS
#   This file is auto-generated by rspec-openapi https://github.com/k0kubun/rspec-openapi
#
#   When you write a spec in spec/requests, running the spec with `OPENAPI=1 rspec` will
#   update this file automatically. You can also manually edit this file.
# EOS

# Generate a custom description, given an RSpec example
# RSpec::OpenAPI.description_builder = -> (example) { example.description }

# Generate a custom summary, given an RSpec example
# This example uses the summary from the example_group.
# RSpec::OpenAPI.summary_builder = ->(example) { example.metadata.dig(:example_group, :openapi, :summary) }

# Generate a custom tags, given an RSpec example
# This example uses the tags from the parent_example_group
# RSpec::OpenAPI.tags_builder = -> (example) { example.metadata.dig(:example_group, :parent_example_group, :openapi, :tags) }

# Configure custom format for specific properties
# This example assigns 'date-time' format to properties with names ending in '_at'
# RSpec::OpenAPI.formats_builder = ->(_example, key) { key.end_with?('_at') ? 'date-time' : nil }

# Change the example type(s) that will generate schema
# RSpec::OpenAPI.example_types = %i[request]

# Configure which path params to ignore
# :controller and :action always exist. :format is added when routes is configured as such.
# RSpec::OpenAPI.ignored_path_params = %i[controller action format]

# Configure which paths to ignore.
# You can exclude some specs via `openapi: false`.
# But, in a complex API usage scenario, you may need to include spec itself, but exclude some private paths.
# In that case, you can specify the paths to ignore.
# String or Regexp is acceptable.
# RSpec::OpenAPI.ignored_paths = ["/admin/full/path/", Regexp.new("^/_internal/")]

# Your custom post-processing hook (like unrandomizing IDs)
# RSpec::OpenAPI.post_process_hook = -> (path, records, spec) do
#   RSpec::OpenAPI::HashHelper.matched_paths(spec, 'paths.*.*.responses.*.content.*.*.*.id').each do |paths|
#     spec.dig(*paths[0..-2]).merge!(id: '123')
#   end
# end
